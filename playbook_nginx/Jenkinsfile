pipeline {
    agent any

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['test_server', 'prod_server'],
            description: 'Выберите окружение для деплоя'
        )
        string(
            name: 'TARGET_HOSTS',
            defaultValue: 'all',
            description: 'Целевые хосты или группа из inventory'
        )
        booleanParam(
            name: 'RECONFIG_MODE',
            defaultValue: false,
            description: 'Только проверка конфигурации без запуска на хостах'
        )
    }

    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'false'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/AlexOBel/ansible_training.git',
                    credentialsId: 'https_github_cred'
            }
        }

        stage('Validation') {
            steps {
                sh '''
                    ansible-playbook --syntax-check ./playbook_nginx/playbook.yml
                    ansible-lint ./playbook_nginx/playbook.yml || true
                '''
            }
        }

        stage('Inventory Check') {
            steps {
                sh """
                    ansible-inventory -i ./playbook_nginx/inventory/${params.ENVIRONMENT} --list
                    ansible-inventory -i ./playbook_nginx/inventory/${params.ENVIRONMENT} --graph
                """
            }
            when {
                expression { params.RECONFIG_MODE == true }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'AnsibleUser',
                            keyFileVariable: 'SSH_KEY_FILE'
                        )
                    ]) {
                        sh """
                            export ANSIBLE_PRIVATE_KEY_FILE=${SSH_KEY_FILE}
                            ansible-playbook \
                                -i inventory/${params.ENVIRONMENT} \
                                -l ${params.TARGET_HOSTS} \
                                --extra-vars "env=${params.ENVIRONMENT}" \
                                ${params.RECONFIG_MODE ? '--check --diff' : ''} \
                                ./playbook_nginx/playbook.yml
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                if (params.RECONFIG_MODE) {
                    slackSend(
                        channel: '#deployments',
                        message: "✅ Reconfig check for ${params.ENVIRONMENT} completed successfully"
                    )
                } else {
                    slackSend(
                        channel: '#deployments',
                        message: "✅ Ansible deployment to ${params.ENVIRONMENT} completed successfully"
                    )
                }
            }
        }
        failure {
            slackSend(
                channel: '#deployments',
                message: "❌ ${params.RECONFIG_MODE ? 'Reconfig check' : 'Deployment'} to ${params.ENVIRONMENT} failed"
            )
        }
    }
}